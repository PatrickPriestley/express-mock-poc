name: Coverage Badge on Push/Tag

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
      - '[0-9]+.*'
  workflow_dispatch:

jobs:
  coverage-badge:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies and run tests with coverage
        run: |
          npm ci
          npm test -- --coverage --coverageReporters=json-summary --coverageReporters=lcov --coverageReporters=text

      - name: Extract coverage
        id: check
        run: |
          mkdir -p badges
          COVERAGE_FILE="coverage/coverage-summary.json"
          CURRENT_COVERAGE="0"

          if [ -f "$COVERAGE_FILE" ]; then
            echo "Found coverage summary"
            CURRENT_COVERAGE=$(node -p "Math.round(JSON.parse(require('fs').readFileSync('$COVERAGE_FILE')).total.lines.pct || 0)")
          else
            echo "❌ No coverage file found at $COVERAGE_FILE"
            exit 1
          fi

          echo "current_coverage=$CURRENT_COVERAGE" >> $GITHUB_OUTPUT

          BADGE_FILE="badges/coverage.svg"
          PREVIOUS_COVERAGE=""

          if [ -f "$BADGE_FILE" ]; then
            PREVIOUS_COVERAGE=$(grep -oP '(?<=coverage-)[0-9]+(?=%25)' "$BADGE_FILE" | head -1 || echo "")
          fi

          if [ "$CURRENT_COVERAGE" != "$PREVIOUS_COVERAGE" ]; then
            echo "should_update=true" >> $GITHUB_OUTPUT
            echo "previous_coverage=$PREVIOUS_COVERAGE" >> $GITHUB_OUTPUT
          else
            echo "should_update=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine badge color
        if: steps.check.outputs.should_update == 'true'
        id: color
        run: |
          COVERAGE=${{ steps.check.outputs.current_coverage }}
          if [ "$COVERAGE" -ge 90 ]; then COLOR="brightgreen"
          elif [ "$COVERAGE" -ge 80 ]; then COLOR="green"
          elif [ "$COVERAGE" -ge 70 ]; then COLOR="yellowgreen"
          elif [ "$COVERAGE" -ge 60 ]; then COLOR="yellow"
          else COLOR="red"; fi
          echo "color=$COLOR" >> $GITHUB_OUTPUT

      - name: Generate badge
        if: steps.check.outputs.should_update == 'true'
        run: |
          mkdir -p badges
          COVERAGE=${{ steps.check.outputs.current_coverage }}
          COLOR=${{ steps.color.outputs.color }}
          curl -s "https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR}" > badges/coverage.svg

      - name: Commit and push badge
        if: steps.check.outputs.should_update == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Only add the badge if it changed
          if git diff --quiet badges/coverage.svg; then
            echo "⚠️ Badge hasn't changed, skipping commit"
          else
            git add badges/coverage.svg
            git commit -m "📊 Update coverage badge to ${{ steps.check.outputs.current_coverage }}% [skip ci]"
            git push
          fi

      - name: Summary
        run: |
          echo "## 🏷️ Coverage Badge Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Current Coverage:** ${{ steps.check.outputs.current_coverage }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Coverage:** ${{ steps.check.outputs.previous_coverage || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Badge Updated:** ${{ steps.check.outputs.should_update }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "![Coverage](./badges/coverage.svg)" >> $GITHUB_STEP_SUMMARY